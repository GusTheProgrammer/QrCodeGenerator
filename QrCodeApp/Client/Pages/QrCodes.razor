@page "/"
@using QrCodeApp.Shared.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (isAuthenticated && qrCodeResponse?.data != null)
{
    foreach (var qrCode in qrCodeResponse.data)
    {
        <div class="qr-code-item">
            <h3>@qrCode.title</h3>
            <p>@qrCode.description</p>
            <a href="@qrCode.link" target="_blank">Link</a>
            <div>Type: @qrCode.type</div>
            <div>Reference: @qrCode.reference</div>
            <img src="@qrCode.qrCode" alt="QR Code" />
        </div>
    }
}
else if (!isAuthenticated)
{
    <p>You need to be logged in to view this page.</p>
}
else
{
    <p>Loading or no data available...</p>
}

@code {
    private QrCodeData qrCodeResponse;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            isAuthenticated = true;
            qrCodeResponse = await Http.GetFromJsonAsync<QrCodeData>("qrCode");
        }
    }

    
}
