@using QrCodeApp.Shared.Models
@using Newtonsoft.Json
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <DialogContent>
            <MudCardContent>
                <MudTextField Label="Title*" @bind-Value="model.title" For="@(() => model.title)" />
                <MudTextField Label="Description*" @bind-Value="model.description" For="@(() => model.description)" />
                <MudTextField Label="Link*" @bind-Value="model.link" For="@(() => model.link)" />
                <MudRadioGroup @bind-SelectedOption="@model.type" ReadOnly>
                    <MudRadio Option="@("static")" Color="Color.Primary">static</MudRadio>
                    <MudRadio Option="@("dynamic")" Color="Color.Secondary">dynamic</MudRadio>
                </MudRadioGroup>
            </MudCardContent>
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update</MudButton>

        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }              
    [Parameter] public EventCallback OnEditCompleted { get; set; }
    [Parameter] public QRCodeRequest EditableQRCode { get; set; }
    private QRCodeRequest model = new QRCodeRequest();
    private QrCodeActionResponse qrCodeActionResponse;

    bool success;
    

    protected override void OnInitialized()
    {
        if (EditableQRCode != null)
        {
            // Populate the model with data for editing
            model = EditableQRCode;
        }
    }


    private async Task HandleValidSubmit(EditContext context)
    {

        var response = await Http.PutAsJsonAsync($"qrCode/{EditableQRCode.Id}", model);
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            qrCodeActionResponse = JsonConvert.DeserializeObject<QrCodeActionResponse>(responseContent);
            success = qrCodeActionResponse != null && !string.IsNullOrEmpty(qrCodeActionResponse.msg);

            if (qrCodeActionResponse != null && qrCodeActionResponse.msg == "Request Successful")
            {
                await OnEditCompleted.InvokeAsync(null);
                Snackbar.Add("Qr Code Edited Successfully!", Severity.Success);
                MudDialog.Close();

            } else
            {
                Snackbar.Add($"Qr Code Edit Failed: {qrCodeActionResponse}", Severity.Error);
            }
        }
        else
        {
            success = false;
        }

        StateHasChanged();


    }

}
