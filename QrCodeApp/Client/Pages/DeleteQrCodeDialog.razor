@using QrCodeApp.Shared.Models
@using Newtonsoft.Json
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudText>Are you sure you want to delete this QR Code?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ConfirmDelete" Color="Color.Primary">Delete</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string QrCodeId { get; set; }
    [Parameter] public EventCallback OnDeleteCompleted { get; set; }
    private QrCodeActionResponse qrCodeActionResponse;
    bool success;

    private async Task ConfirmDelete()
    {
        var response = await Http.DeleteAsync($"qrCode/{QrCodeId}");
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            qrCodeActionResponse = JsonConvert.DeserializeObject<QrCodeActionResponse>(responseContent);
            success = qrCodeActionResponse != null && !string.IsNullOrEmpty(qrCodeActionResponse.msg);

            if (qrCodeActionResponse != null && qrCodeActionResponse.msg == "Request Successful")
            {
                Snackbar.Add("Qr Code Deleted Successfully!", Severity.Success);
                await OnDeleteCompleted.InvokeAsync(null);
                MudDialog.Close();

            }
            else
            {
                Snackbar.Add($"Qr Code Delete Failed: {qrCodeActionResponse}", Severity.Error);
            }
        }
        else
        {
            success = false;
        }

        StateHasChanged();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
