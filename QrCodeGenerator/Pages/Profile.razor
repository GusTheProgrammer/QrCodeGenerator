@page "/profile"
@using Newtonsoft.Json
@using QrCodeGenerator.Models
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime



<MudGrid Justify="Justify.Center">

    <MudItem xs="12">
        @if (!isUserRegistered)
        {
            <MudText Class="mb-6" Typo="Typo.h4">Register for an API Key!</MudText>
            <EditForm Model="@user" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <MudGrid Class="mb-6" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="width: 100%">
                    <MudItem xs="12" md="8">
                        <MudTextField Label="Name" @bind-Value="user.Name" Variant="Variant.Filled" FullWidth />
                         <ValidationMessage For="@(() => user.Name)" />
                     </MudItem>
                     <MudItem xs="12" md="4" Style="display: flex; justify-content: center; align-items: center;">
                         <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
                     </MudItem>
                 </MudGrid>
             </EditForm>


        }
    </MudItem>
</MudGrid>
<MudDivider DividerType="DividerType.Middle" Class="my-6" />

<MudText Typo="Typo.h4">Data Management</MudText>
<MudGrid Class="mt-6" Justify="Justify.FlexEnd">
    <MudItem xs="4" >
        <MudButton @onclick="ExportData" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Save" Style="width: 200px; height: 48px;">Export Data</MudButton>
    </MudItem>
    <MudItem xs="4">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@context.Id" Style="width: 200px; height: 48px; position: relative; top: -6px;">
                    Import Data
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudItem>
    <MudItem xs="4">
        <MudButton @onclick="DeleteData" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Style="width: 200px; height: 48px;">Delete</MudButton>
    </MudItem>
</MudGrid>


@code {
    private User user = new User();
    private string registrationMessage = string.Empty;
    private bool isUserRegistered = false;
    private MudForm form;
    private IBrowserFile uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        var userDataJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        isUserRegistered = !string.IsNullOrEmpty(userDataJson);
    }

    private async Task HandleRegistration()
    {
        try
        {
            var responseJson = await ApiService.GenerateApiKey();
            var responseObj = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseJson);
            var apiKey = (string)responseObj.data; // Extracting just the API key

            user.ApiKey = apiKey;
            var userDataJson = Newtonsoft.Json.JsonConvert.SerializeObject(user);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", userDataJson);

            registrationMessage = "Registration successful! API Key generated.";

            Snackbar.Add(registrationMessage, Severity.Success);
            NavigationManager.NavigateTo("/", forceLoad: true);


        }
        catch (Exception ex)
        {
            registrationMessage = $"Error during registration: {ex.Message}";
            Snackbar.Add(registrationMessage, Severity.Error);
        }
    }

    private async Task ExportData()
    {
        var userDataJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (string.IsNullOrEmpty(userDataJson))
        {
            Snackbar.Add("No user data to export.", Severity.Warning);
            return;
        }

        // Trigger download (using Blazor download file logic or JS interop)
        await JSRuntime.InvokeVoidAsync("downloadFile", "userData.json", "text/json", userDataJson);
        Snackbar.Add("Data Exported Successfully!", Severity.Success);

    }

    private void UploadFiles(IBrowserFile file)
    {
        // Assuming you want to handle file upload here
        uploadedFile = file;
        ImportData(uploadedFile); // Call the ImportData method for the uploaded file
    }

    private async Task ImportData(IBrowserFile file)
    {
        if (file == null) return;

        using var reader = new StreamReader(file.OpenReadStream());
        var userDataJson = await reader.ReadToEndAsync();

        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", userDataJson);
        Snackbar.Add("User data imported successfully!", Severity.Success);
        NavigationManager.NavigateTo("/", forceLoad: true);

    }

    private async Task DeleteData()
    {
        try
        {
            // Remove data from local storage
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "user");

            // Reset user data
            user = new User();
            isUserRegistered = false;
            registrationMessage = "Data deleted successfully!";
            Snackbar.Add(registrationMessage, Severity.Success);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

        }
        catch (Exception ex)
        {
            registrationMessage = $"Error during data deletion: {ex.Message}";
            Snackbar.Add(registrationMessage, Severity.Error);
        }
    }


}
